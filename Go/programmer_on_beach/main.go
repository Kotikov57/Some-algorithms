/* Однажды программист Алексей из Яндекса взял отпуск и уехал отдыхать на море. Там в один из дней он пошёл на пляж, причём пошёл туда не один.
Возможно, он пошёл туда с мамой, возможно, с бабушкой, а, возможно, с другом или подругой. Важно, что пошёл он туда не один.
На пляже программист Алексей обнаружил, что осталось всего n (2≤n≤10^6) свободных лежаков. 
Но среди всего этого множества лежаков программисту Алексею нужно было всего лишь 2: для него самого и для того (или той), с кем он пришёл. 
Так как программист Алексей очень любил порядок, то он хотел, чтобы лежаки были как можно более похожи друг на друга. Похожесть лежаков можно вычислить следующим образом:
Каждому лежаку каким-то образом по его внешним признакам назначается некоторое число a(0≤a≤10^9).
Затем непохожесть двух лежаков вычисляется как XOR (побитовое исключающее ИЛИ) чисел назначенных этим лежакам. Чем значение непохожести меньше, тем более похожи лежаки.
Помогите программисту Алексею понять, какого минимального значения непохожести лежаков он может достичь, сравнив попарно все свободные лежаки. */

package main

import (
	"fmt"
	"sort"
)

func main() {
	var t,n int
	var array []int
	fmt.Scan(&t)
	for i := 0; i < t; i++{
		fmt.Scan(&n)
		array = make([]int, n)
		for j := 0; j < n; j++{
			fmt.Scan(&array[j])
		}
		sort.Slice(array,func(i, j int) bool{
			return array[i] < array[j]
		})
		min := 100000000
		for k := 0; k < n -1; k++{
			xor := array[k] ^ array[k + 1]
			if  xor < min{
				min = xor 
			}
		}
		fmt.Println(min)
	}
}